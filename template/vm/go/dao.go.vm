// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// ${.functionName}Dao
// @author ${.author}
// @date ${.datetime}
// ============================================================================

package dao

import (
    "context"
    "fmt"
    "${.packageName}/internal/modules/${.moduleName}/dao/internal"
    "${.packageName}/internal/modules/${.moduleName}/model"
    "${.packageName}/internal/modules/${.moduleName}/model/do"
    "${.packageName}/internal/modules/${.moduleName}/model/entity"
    "${.packageName}/internal/modules/${.moduleName}/service"
    "github.com/gogf/gf/v2/database/gdb"
    "github.com/gogf/gf/v2/errors/gerror"
    "github.com/gogf/gf/v2/frame/g"
    "github.com/gogf/gf/v2/text/gstr"
)

// internal${.ClassName}Dao is internal type for wrapping internal DAO implements.
type internal${.ClassName}Dao = *internal.${.ClassName}Dao

// ${.className}Dao is the data access object for table sys_job.
// You can define custom methods on it to extend its functionality as you wish.
type ${.className}Dao struct {
    internal${.ClassName}Dao
}

var (
    // ${.ClassName} is globally public accessible object for table ${.tableName} operations.
    ${.ClassName} = ${.className}Dao{
        internal.New${.ClassName}Dao(),
    }
)

// Fill with you ideas below.

// SelectById 查询${.functionName}
func (d *${.className}Dao) SelectById(ctx context.Context, ${.pkColumn.GoField|uncapitalize} ${.pkColumn.GoType}) (${.className} *entity.${.ClassName}${if .isSub}Ex${end}, err error) {
    err = ${.ClassName}.Ctx(ctx).Fields(&entity.${.ClassName}{}).Scan(&${.className}, ${.ClassName}.Columns().${.pkColumn.GoField}, ${.pkColumn.GoField|uncapitalize})
    if err != nil {
        return nil, err
    }
    if ${.className} == nil {
        return nil, gerror.New("数据不存在")
    }
${if .isSub}
    ${.className}.${.subClassName}List, err := d.Select${.subClassName}ListBy${.subTableFkClassName}(ctx, ${.pkColumn.GoField|uncapitalize})
    if err != nil {
        return nil, err
    }
${end}
    return ${.className}, nil
}

// SelectList 查询${.functionName}列表
func (d *${.className}Dao) SelectList(ctx context.Context, ${.className} *entity.${.ClassName}) (list []*entity.${.ClassName}, total int, err error) {
    m := ${.ClassName}.Ctx(ctx)
${- range $index, $column := .columns}
${- if eq $column.IsQuery "1"}
${- $queryType:=$column.QueryType}
${- $goField:=$column.GoField}
${- $goType:=$column.GoType}
${- $columnName:=$column.ColumnName}
${- $attrName:=$goField | uncapitalize}
${- if eq $queryType "EQ"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.Where(${$.ClassName}.Columns().${$goField}, ${$.className}.${$goField})
    }
${- else}
    m = m.Where(${$.ClassName}.Columns().${$goField}, ${$.className}.${$goField})
${- end}
${- else if eq $queryType "NE"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereNot(${$.ClassName}.Columns().${$goField}, ${$attrName})
    }
${- else}
    m = m.WhereNot(${$.ClassName}.Columns().${$goField}, ${$attrName})
${- end}
${- else if eq $queryType "GT"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereGT(${$.ClassName}.Columns().${$goField}, ${$attrName})
    }
${- else}
    m = m.WhereGT(${$.ClassName}.Columns().${$goField}, ${$attrName})
${- end}
${- else if eq $queryType "GTE"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereGTE(${$.ClassName}.Columns().${$goField}, ${$attrName})
    }
${- else}
    m = m.WhereGTE(${$.ClassName}.Columns().${$goField}, ${$attrName})
${- end}
${- else if eq $queryType "LT"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereLT(${$.ClassName}.Columns().${$goField}, ${$attrName})
    }
${- else}
    m = m.WhereLT(${$.ClassName}.Columns().${$goField}, ${$attrName})
${- end}
${- else if eq $queryType "LTE"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereLTE(${$.ClassName}.Columns().${$goField}, ${$attrName})
    }
${- else}
    m = m.WhereLTE(${$.ClassName}.Columns().${$goField}, ${$attrName})
${- end}
${- else if eq $queryType "LIKE"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereLike(${$.ClassName}.Columns().${$goField}, "%" + ${$attrName} + "%")
    }
${- else}
    m = m.WhereLike(${$.ClassName}.Columns().${$goField}, "%" + ${$attrName} + "%")
${- end}
${- else if eq $queryType "BETWEEN"}
${- if eq $goType "string"}
    if ${$attrName} := gstr.Trim(${$.className}.${$goField}); len(${$attrName}) > 0 {
        m = m.WhereBetween(${$.ClassName}.Columns().${$goField}, ${$.className}.Begin${$goField}, ${.className}.End${$goField})
    }
${- else}
    m = m.WhereBetween(${$.ClassName}.Columns().${$goField}, ${$.className}.Begin${$goField}, ${.className}.End${$goField})
${- end}
${- end}
${- end}
${- end}
${- range $index, $column := .columns}
${- if eq $column.GoField "CreateBy"}
    m = commonService.BizCtx().WhereBeginTime(ctx, ${$.ClassName}.Columns().CreatedAt, m)
    m = commonService.BizCtx().WhereEndTime(ctx, ${$.ClassName}.Columns().CreatedAt, m)
${- end}
${- end}
${- if eq .isTree true}
    if err = m.Fields(&entity.${$.ClassName}{}).Scan(&list); err != nil {
        return
    }
    return res, nil
${- else}
    total, err = m.Count()
    if err != nil || total == 0 {
        return
    }

    err = commonService.BizCtx().Page(ctx, m).Fields(&entity.${$.ClassName}{}).Scan(&list)
    return
${- end}
}

// Insert 新增${.functionName}
func (d *${.className}Dao) Insert(ctx context.Context, ${.className} *do.${.ClassName}, tx ...gdb.TX) (id int64, err error) {
    m := ${.ClassName}.Ctx(ctx)
    if len(tx) > 0 {
        m = m.TX(tx[0])
    }
    id, err = m.InsertAndGetId(${.className})
    return
}

// Update 修改${.functionName}
func (d *${.className}Dao) Update(ctx context.Context, ${.className} *do.${.ClassName}, tx ...gdb.TX) (err error) {
    m := ${.ClassName}.Ctx(ctx)
    if len(tx) > 0 {
        m = m.TX(tx[0])
    }
    _, err = m.Update(${.className}, ${.ClassName}.Columns().${.pkColumn.GoField}, ${.className}.${.pkColumn.GoField})
    return err
}

// DeleteById 删除${.functionName}
func (d *${.className}Dao) DeleteById(ctx context.Context, ${.pkColumn.GoField|uncapitalize} ${.pkColumn.GoType}, tx ...gdb.TX) (err error) {
    m := ${.ClassName}.Ctx(ctx)
    if len(tx) > 0 {
        m = m.TX(tx[0])
    }
    _, err = m.Delete(${.ClassName}.Columns().${.pkColumn.GoField}, ${.pkColumn.GoField|uncapitalize})
    return err
}

// DeleteByIds 批量删除${.functionName}
func (d *${.className}Dao) DeleteByIds(ctx context.Context, ${.pkColumn.GoField|uncapitalize}s []${.pkColumn.GoType}, tx ...gdb.TX) (err error) {
    m := ${.ClassName}.Ctx(ctx)
    if len(tx) > 0 {
        m = m.TX(tx[0])
    }
    _, err = m.WhereIn(${.ClassName}.Columns().${.pkColumn.GoField}, ${.pkColumn.GoField|uncapitalize}s).Delete()
    return err
}

${if .isSub}
// Select${.subClassName}ListBy${.subTableFkClassName} 通过${.functionName}ID删除${.subTable.FunctionName}信息
func (d *${.className}Dao) Select${.subClassName}ListBy${.subTableFkClassName}(ctx context.Context, ${.pkColumn.GoField|uncapitalize} ${.pkColumn.GoType}) (list []*entity.${.subClassName}, err error) {
    err = ${.subClassName}.Ctx(ctx).Fields(&entity.${.subClassName}{}).Scan(&list, ${.subClassName}.Columns().${.subTableFkClassName}, ${.pkColumn.GoField|uncapitalize})
    return
}

// Delete${.subClassName}By${.subTableFkClassName} 通过${.functionName}ID删除${.subTable.FunctionName}信息
func (d *${.className}Dao) Delete${.subClassName}By${.subTableFkClassName}(ctx context.Context, ${.pkColumn.GoField|uncapitalize} ${.pkColumn.GoType}, tx gdb.TX) (err error) {
    _, err = ${.subClassName}.Ctx(ctx).TX(tx).Delete(${.subClassName}.Columns().${.pkColumn.GoField}, ${.pkColumn.GoField|uncapitalize})
    return
}

// Delete${.subClassName}By${.subTableFkClassName}s 批量删除${.subTable.FunctionName}
func (d *${.className}Dao) Delete${.subClassName}By${.subTableFkClassName}s(ctx context.Context, ${.pkColumn.GoField|uncapitalize}s []${.pkColumn.GoType}, tx gdb.TX) error {
    _, err := ${.subClassName}.Ctx(ctx).TX(tx).Delete(${.subClassName}.Columns().${.pkColumn.GoField}, ${.pkColumn.GoField|uncapitalize}s)
    return err
}

// Batch${.subClassName} 批量新增${.subTable.FunctionName}
func (d *${.className}Dao) Batch${.subClassName}(ctx context.Context, ${.subclassName}List []*do.${.subClassName}, tx gdb.TX) (err error) {
    _, err = ${.subClassName}.Ctx(ctx).TX(tx).Insert(${.subclassName}List)
    return
}
${end}
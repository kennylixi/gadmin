// ==========================================================================
// Code generated by gen tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
    "context"

    "github.com/gogf/gf/v2/database/gdb"
    "github.com/gogf/gf/v2/frame/g"
)

// ${.ClassName}Dao is the data access object for table ${.tableName}.
type ${.ClassName}Dao struct {
    table   string          // table is the underlying table name of the DAO.
    group   string          // group is the database configuration group name of current DAO.
    columns ${.ClassName}Columns // columns contains all the column names of Table for convenient usage.
}

// ${.ClassName}Columns defines and stores column names for table ${.tableName}.
type ${.ClassName}Columns struct {
${- range $index, $column := .columns}
${- $comment:=$column.ColumnComment | comment}
    ${$column.GoField} string // ${$comment}
${- end}
}

// ${.className}Columns holds the columns for table ${.tableName}.
var ${.className}Columns = ${.ClassName}Columns{
${- range $index, $column := .columns}
    ${$column.GoField}: "${$column.ColumnName}",
${- end}
}

// New${.ClassName}Dao creates and returns a new DAO object for table data access.
func New${.ClassName}Dao() *${.ClassName}Dao {
    return &${.ClassName}Dao{
        group:   "default",
        table:   "${.tableName}",
        columns: ${.className}Columns,
    }
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *${.ClassName}Dao) DB() gdb.DB {
    return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *${.ClassName}Dao) Table() string {
    return dao.table
}

// Columns returns all column names of current dao.
func (dao *${.ClassName}Dao) Columns() ${.ClassName}Columns {
    return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *${.ClassName}Dao) Group() string {
    return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *${.ClassName}Dao) Ctx(ctx context.Context) *gdb.Model {
    return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *${.ClassName}Dao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
    return dao.Ctx(ctx).Transaction(ctx, f)
}

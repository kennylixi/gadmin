// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// ${.functionName}Logic层
// @author ${.author}
// @date ${.datetime}
// ============================================================================

package service

import (
    "context"
    "${.packageName}/internal/modules/${.moduleName}/dao"
    "${.packageName}/internal/modules/${.moduleName}/model"
    "${.packageName}/internal/modules/${.moduleName}/model/entity"
    "${.packageName}/internal/modules/${.moduleName}/model/do"
    "${.packageName}/internal/modules/${.moduleName}/service"
)

// ${.ClassName} ${.functionName}管理服务
type s${.ClassName} struct{}

func init() {
    service.Register${.ClassName}(New())
}

func New() *s${.ClassName} {
    return &s${.ClassName}{}
}

// SelectById 查询${.functionName}信息
func (s *s${.ClassName}) SelectById(ctx context.Context, ${.pkColumn.GoField|uncapitalize} ${.pkColumn.GoType}) (*entity.${.ClassName}, error) {
    return dao.${.ClassName}.SelectById(ctx, ${.pkColumn.GoField|uncapitalize})
}

// SelectList 查询${.functionName}列表
func (s *s${.ClassName}) SelectList(ctx context.Context, in *model.${.ClassName}ListInput) (out *model.${.ClassName}ListOutput, err error) {
    out = &model.${.ClassName}ListOutput{}
    out.List, out.Total, err = dao.${.ClassName}.SelectList(ctx, &entity.${.ClassName}{
    ${- range $index, $column := .columns}
    ${- if eq $column.IsQuery "1"}
    ${- $comment:=$column.ColumnComment | comment}
        ${$column.GoField}: in.${$column.GoField},
    ${- end}
    ${- end}
    })
    return
}

// Insert 新增${.functionName}
func (s *s${.ClassName}) Insert(ctx context.Context, in *model.${.ClassName}AddInput) (err error) {
    ${.className} := &do.${.ClassName}{
        ${- range $index, $column := .columns}
        ${- if eq $column.IsInsert "1"}
        ${$column.GoField}: in.${$column.GoField},
        ${- end}
        ${- end}
        ${- range $index, $column := .columns}
        ${- if eq $column.GoField "CreateBy"}
        CreateBy: in.CreateBy,
        ${- end}
        ${- end}
    }

    ${- if .isSub}
    err = dao.${.ClassName}.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
        _, err := dao.${.ClassName}.Insert(ctx, ${.className}, tx)
        if err != nil {
            return err
        }
        return s.insert${.subClassName}(ctx, ${.className}, tx)
    })
    ${- else}
    _, err = dao.${.ClassName}.Insert(ctx, ${.className})
    ${- end}
    return
}

// Update 修改${.functionName}
func (s *s${.ClassName}) Update(ctx context.Context, in *model.${.ClassName}EditInput) (err error) {
    ${.className} := &do.${.ClassName}{
        ${.pkColumn.GoField}: in.${.pkColumn.GoField},
        ${- range $index, $column := .columns}
        ${- if eq $column.IsEdit "1"}
        ${$column.GoField}: in.${$column.GoField},
        ${- end}
        ${- end}
        ${- range $index, $column := .columns}
        ${- if eq $column.GoField "UpdateBy"}
        UpdateBy: in.UpdateBy,
        ${- end}
        ${- end}
    }

    ${- if .isSub}
    err = dao.${.ClassName}.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
        err := dao.${.ClassName}.Delete${.subClassName}By${.subTableFkClassName}(ctx, ${.className}.${.pkColumn.GoField}, tx)
        if err != nil {
            return err
        }
        err = dao.${.ClassName}.Update(ctx, ${.className})
        if err != nil {
            return err
        }
        return s.insert${.subClassName}(ctx, ${.className}, tx)
    })
    ${- else}
    err = dao.${.ClassName}.Update(ctx, ${.className})
    ${- end}
    return
}

// DeleteByIds 批量删除${.functionName}
func (s *s${.ClassName}) DeleteByIds(ctx context.Context, ${.pkColumn.GoField|uncapitalize}s []${.pkColumn.GoType}) error {
    ${- if .isSub}
    return dao.${.ClassName}.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
        err := dao.${.ClassName}.Delete${.subClassName}By${.subTableFkClassName}s(ctx, ${.pkColumn.GoField|uncapitalize}s, tx)
        if err != nil {
            return err
        }
       return dao.${.ClassName}.DeleteByIds(ctx, ${.pkColumn.GoField|uncapitalize}s, tx)
    })
    ${- else}
    return dao.${.ClassName}.DeleteByIds(ctx, ${.pkColumn.GoField|uncapitalize}s)
    ${- end}
}

${- if .isSub}
// 新增${.subTable.FunctionName}信息
func (s *s${.ClassName}) insert${.subClassName}(ctx context.Context, ${.className} *model.${.ClassName}, tx gdb.TX) error {
    list := ${.className}.${.subClassName}List
    if len(list) > 0 {
        ${.pkColumn.GoField|uncapitalize} := ${.className}.${.pkColumn.GoField}
        for _, ${.subclassName} := range list {
            ${.subclassName}.${.subTableFkClassName} = ${.pkColumn.GoField|uncapitalize}
        }
    }
    return dao.${.ClassName}.Batch${.subClassName}(ctx, list, tx)
}
${- end}
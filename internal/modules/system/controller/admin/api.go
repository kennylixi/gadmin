// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// 接口管理Controller层
// @author kennylixi
// @date 2023-05-14 11:01:08
// ============================================================================

package admin

import (
	"context"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/api/v1/admin"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	sysService "github.com/kennylixi/gadmin/internal/modules/system/service"
)

// Api 接口管理管理
var Api = cApi{}

type cApi struct{}

// List 查询接口管理列表
func (c *cApi) List(ctx context.Context, req *admin.ApiListReq) (res *admin.ApiListRes, err error) {
	out, err := sysService.Api().SelectList(ctx, &model.ApiListInput{
		ApiName:   req.ApiName,
		ApiModule: req.ApiModule,
		ApiUrl:    req.ApiUrl,
		ApiMethod: req.ApiMethod,
	})
	if err != nil {
		return
	}
	res = &admin.ApiListRes{
		List:  out.List,
		Total: out.Total,
	}
	return
}

// ModuelList 查询接口模板列表
func (c *cApi) ModuelList(ctx context.Context, req *admin.ApiModuleListReq) (res admin.ApiModuleListRes, err error) {
	out, err := sysService.Api().SelectModuleList(ctx)
	if err != nil {
		return
	}
	res = out
	return
}

// GetInfo 获取接口管理详细信息
func (c *cApi) GetInfo(ctx context.Context, req *admin.ApiGetInfoReq) (res *admin.ApiGetInfoRes, err error) {
	out, err := sysService.Api().SelectById(ctx, req.ApiId)
	if err != nil {
		return
	}
	res = (*admin.ApiGetInfoRes)(out)
	return
}

// Reimport 重新导入所有接口
func (c *cApi) Reimport(ctx context.Context, req *admin.ApiReImportReq) (res *admin.ApiReImportRes, err error) {
	err = sysService.Api().ReImportAll(ctx)
	return
}

// Treeselect 获取接口树形结构
func (c *cApi) Treeselect(ctx context.Context, req *admin.ApiTreeselectReq) (res admin.ApiTreeselectRes, err error) {
	items, err := sysService.Api().Treeselect(ctx)
	if err != nil {
		return
	}
	res = items
	return
}

// RoleApiTreeselect 根据角色获取接口树形结构
func (c *cApi) RoleApiTreeselect(ctx context.Context, req *admin.ApiRoleApiTreeselectReq) (res admin.ApiRoleApiTreeselectRes, err error) {
	apis, err := sysService.Api().Treeselect(ctx)
	if err != nil {
		return
	}

	apiIds, err := sysService.Api().SelectApisByRoleId(ctx, req.RoleId)
	if err != nil {
		return
	}

	res = admin.ApiRoleApiTreeselectRes{
		CheckedKeys: apiIds,
		Apis:        apis,
	}
	return
}

// Add 新增接口管理
func (c *cApi) Add(ctx context.Context, req *admin.ApiAddReq) (res *admin.ApiAddRes, err error) {
	in := &model.ApiAddInput{
		ApiName:   req.ApiName,
		ApiModule: req.ApiModule,
		ApiUrl:    req.ApiUrl,
		ApiMethod: req.ApiMethod,
		Remark:    req.Remark,
		CreateBy:  commonService.BizCtx().GetUserName(ctx),
	}
	err = sysService.Api().Insert(ctx, in)
	return
}

// Edit 修改接口管理
func (c *cApi) Edit(ctx context.Context, req *admin.ApiEditReq) (res *admin.ApiEditRes, err error) {
	in := &model.ApiEditInput{
		ApiId:     req.ApiId,
		ApiName:   req.ApiName,
		ApiModule: req.ApiModule,
		ApiUrl:    req.ApiUrl,
		ApiMethod: req.ApiMethod,
		Remark:    req.Remark,
		UpdateBy:  commonService.BizCtx().GetUserName(ctx),
	}
	err = sysService.Api().Update(ctx, in)
	return
}

// Delete 删除接口管理
func (c *cApi) Delete(ctx context.Context, req *admin.ApiDeleteReq) (res *admin.ApiDeleteRes, err error) {
	err = sysService.Api().DeleteByIds(ctx, req.ApiIds)
	return
}

// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// 驱动配置Logic层
// @author kennylixi
// @date 2023-03-23 14:15:08
// ============================================================================

package service

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
	"github.com/kennylixi/gadmin/internal/modules/system/service"
	"github.com/kennylixi/go-filesys"
)

// FileDriver 驱动配置管理服务
type sFileDriver struct{}

func init() {
	service.RegisterFileDriver(New())
}

func New() *sFileDriver {
	return &sFileDriver{}
}

// SelectById 查询驱动配置信息
func (s *sFileDriver) SelectById(ctx context.Context, id int64) (fileDriver *entity.FileDriver, err error) {
	err = dao.FileDriver.Ctx(ctx).Fields(&entity.FileDriver{}).Scan(&fileDriver, dao.FileDriver.Columns().Id, id)
	if err != nil {
		return nil, err
	}
	if fileDriver == nil {
		return nil, gerror.New("数据不存在")
	}

	return
}

// GetMasterDriver 获取主驱动
func (s *sFileDriver) GetMasterDriver(ctx context.Context) (fileDriver *entity.FileDriver, err error) {
	err = dao.FileDriver.Ctx(ctx).Fields(&entity.FileDriver{}).Scan(&fileDriver, dao.FileDriver.Columns().Master, true)
	if err != nil {
		return nil, err
	}
	if fileDriver == nil {
		return nil, gerror.New("数据不存在")
	}

	return
}

// SelectList 查询驱动配置列表
func (s *sFileDriver) SelectList(ctx context.Context, in *model.FileDriverListInput) (out *model.FileDriverListOutput, err error) {
	out = &model.FileDriverListOutput{}

	m := dao.FileDriver.Ctx(ctx)
	if name := gstr.Trim(in.Name); len(name) > 0 {
		m = m.WhereLike(dao.FileDriver.Columns().Name, "%"+name+"%")
	}
	if driver := gstr.Trim(in.Driver); len(driver) > 0 {
		m = m.Where(dao.FileDriver.Columns().Driver, driver)
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, dao.FileDriver.Columns().CreatedAt, m)
	m = commonService.BizCtx().WhereEndTime(ctx, dao.FileDriver.Columns().CreatedAt, m)

	out.Total, err = m.Fields("*").Count()
	if err != nil || out.Total == 0 {
		return
	}

	err = commonService.BizCtx().Page(ctx, m).Fields(entity.FileDriver{}).Scan(&out.List)
	return
}

// Insert 新增驱动配置
func (s *sFileDriver) Insert(ctx context.Context, in *model.FileDriverAddInput) (err error) {
	fstore, err := filesys.NewStore(in.Driver, in.Config.Interface())
	if err != nil {
		return
	}
	if err = fstore.PingTest(ctx); err != nil {
		return
	}
	_, err = dao.FileDriver.Ctx(ctx).InsertAndGetId(&do.FileDriver{
		Name:     in.Name,
		Driver:   in.Driver,
		Remark:   in.Remark,
		Master:   in.Master,
		Config:   in.Config,
		CreateBy: in.CreateBy,
	})
	if err != nil {
		return err
	}
	return service.File().LoadDrivers(ctx)
}

// Update 修改驱动配置
func (s *sFileDriver) Update(ctx context.Context, in *model.FileDriverEditInput) (err error) {
	fstore, err := filesys.NewStore(in.Driver, in.Config.Interface())
	if err != nil {
		return
	}
	if err = fstore.PingTest(ctx); err != nil {
		return
	}
	_, err = dao.FileDriver.Ctx(ctx).Update(&do.FileDriver{
		Id:       in.Id,
		Name:     in.Name,
		Driver:   in.Driver,
		Remark:   in.Remark,
		Master:   in.Master,
		Config:   in.Config,
		UpdateBy: in.UpdateBy,
	}, dao.FileDriver.Columns().Id, in.Id)
	if err != nil {
		return err
	}
	return service.File().LoadDrivers(ctx)
}

// DeleteByIds 批量删除驱动配置
func (s *sFileDriver) DeleteByIds(ctx context.Context, ids []int64) error {
	_, err := dao.FileDriver.Ctx(ctx).Where(dao.FileDriver.Columns().Id, ids).Delete()
	return err
}

// SetMaster 设置主驱动配置
func (s *sFileDriver) SetMaster(ctx context.Context, id int64) error {
	return dao.FileDriver.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
		_, err := dao.FileDriver.Ctx(ctx).TX(tx).
			Data(dao.FileDriver.Columns().Master, false).
			Where(dao.FileDriver.Columns().Master, true).Update()
		if err != nil {
			return err
		}
		_, err = dao.FileDriver.Ctx(ctx).TX(tx).
			Data(dao.FileDriver.Columns().Master, true).
			Where(dao.FileDriver.Columns().Id, id).Update()

		return service.File().SetMasterDriver(ctx, id)
	})
}

// Test 测试驱动配置
func (s *sFileDriver) Test(ctx context.Context, id int64) error {
	fileDriver, err := s.SelectById(ctx, id)
	if err != nil {
		return err
	}
	fstore, err := filesys.NewStore(fileDriver.Driver, fileDriver.Config.Interface())
	if err != nil {
		return err
	}
	return fstore.PingTest(ctx)
}

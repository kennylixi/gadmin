// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// 消息模板Logic层
// @author kennylixi
// @date 2023-03-29 15:55:04
// ============================================================================

package service

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/encoding/gjson"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/text/gstr"
	"github.com/kennylixi/gadmin/internal/asynq/client"
	tasksModel "github.com/kennylixi/gadmin/internal/asynq/model"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao"
	systemModel "github.com/kennylixi/gadmin/internal/modules/system/model"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
	"github.com/kennylixi/gadmin/internal/modules/system/service"
	"github.com/kennylixi/gadmin/internal/modules/system/tasks"
)

// PushTemplate 消息模板管理服务
type sPushTemplate struct{}

func init() {
	service.RegisterPushTemplate(New())
}

func New() *sPushTemplate {
	return &sPushTemplate{}
}

// SelectById 查询消息模板信息
func (s *sPushTemplate) SelectById(ctx context.Context, id int64) (pushTempate *entity.PushTemplate, err error) {
	err = dao.PushTemplate.Ctx(ctx).Fields(&entity.PushTemplate{}).Scan(&pushTempate, dao.PushTemplate.Columns().Id, id)
	return
}

// SelectByCode 查询消息模板信息
func (s *sPushTemplate) SelectByCode(ctx context.Context, code string) (pushTempate *entity.PushTemplate, err error) {
	err = dao.PushTemplate.Ctx(ctx).Fields(&entity.PushTemplate{}).Scan(&pushTempate, dao.PushTemplate.Columns().Code, code)
	return
}

// SelectList 查询消息模板列表
func (s *sPushTemplate) SelectList(ctx context.Context, in *systemModel.PushTemplateListInput) (out *systemModel.PushTemplateListOutput, err error) {
	out = &systemModel.PushTemplateListOutput{}
	tmpAlias, typeAlias, channelAlias := "tmp", "t", "c"
	m := dao.PushTemplate.Ctx(ctx).As(tmpAlias)
	if name := gstr.Trim(in.Name); len(name) > 0 {
		m = m.WherePrefixLike(tmpAlias, dao.PushTemplate.Columns().Name, "%"+name+"%")
	}
	if code := gstr.Trim(in.Code); len(code) > 0 {
		m = m.WherePrefixLike(tmpAlias, dao.PushTemplate.Columns().Code, "%"+code+"%")
	}
	if msgType := gstr.Trim(in.MsgType); len(msgType) > 0 {
		m = m.WherePrefix(tmpAlias, dao.PushTemplate.Columns().MsgType, msgType)
	}
	if status := gstr.Trim(in.Status); len(status) > 0 {
		m = m.WherePrefix(tmpAlias, dao.PushTemplate.Columns().Status, status)
	}
	if in.ChannelId > 0 {
		m = m.WherePrefix(tmpAlias, dao.PushTemplate.Columns().ChannelId, in.ChannelId)
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, dao.PushTemplate.Columns().CreatedAt, m, tmpAlias)
	m = commonService.BizCtx().WhereEndTime(ctx, dao.PushTemplate.Columns().CreatedAt, m, tmpAlias)
	out.Total, err = m.Count()
	if err != nil || out.Total == 0 {
		return
	}

	m = m.LeftJoin(dao.PushChannel.Table(), channelAlias, fmt.Sprintf("%s.%s=%s.%s", tmpAlias, dao.PushTemplate.Columns().ChannelId, channelAlias, dao.PushChannel.Columns().Id))
	m = m.LeftJoin(dao.PushType.Table(), typeAlias, fmt.Sprintf("%s.%s=%s.%s", channelAlias, dao.PushChannel.Columns().TypeId, typeAlias, dao.PushType.Columns().Id))
	err = commonService.BizCtx().Page(ctx, m).
		FieldsPrefix(tmpAlias, &entity.PushTemplate{}).
		Fields(fmt.Sprintf("%s.%s as channelStatus, %s.%s as channelName", channelAlias, dao.PushChannel.Columns().Status, channelAlias, dao.PushChannel.Columns().Name)).
		Fields(fmt.Sprintf("%s.%s as typeStatus, %s.%s as typeName", typeAlias, dao.PushType.Columns().Status, typeAlias, dao.PushType.Columns().Name)).
		Scan(&out.List)
	return
}

// Insert 新增消息模板
func (s *sPushTemplate) Insert(ctx context.Context, in *systemModel.PushTemplateAddInput) (err error) {
	if cfg := gstr.Trim(in.Params); cfg != "" {
		if _, err := gjson.Decode(in.Params); err != nil {
			return gerror.Wrap(err, "模板参数Json格式错误")
		}
	}

	pushChannel, err := service.PushChannel().SelectById(ctx, in.ChannelId)
	if err != nil {
		return
	}
	if pushChannel == nil {
		err = gerror.New("渠道不存在")
		return
	}

	isUnique, err := s.checkCodeUnique(ctx, in.Code, -1)
	if err != nil {
		return
	}
	if !isUnique {
		err = gerror.New("模板编码已存在")
		return
	}

	_, err = dao.PushTemplate.Ctx(ctx).InsertAndGetId(&do.PushTemplate{
		Name:      in.Name,
		Code:      in.Code,
		ChannelId: in.ChannelId,
		Params:    in.Params,
		Cron:      in.Cron,
		MsgType:   in.MsgType,
		Remark:    in.Remark,
		CreateBy:  in.CreateBy,
	})
	return
}

// Update 修改消息模板
func (s *sPushTemplate) Update(ctx context.Context, in *systemModel.PushTemplateEditInput) (err error) {
	if cfg := gstr.Trim(in.Params); cfg != "" {
		if _, err := gjson.Decode(in.Params); err != nil {
			return gerror.Wrap(err, "模板参数Json格式错误")
		}
	}

	pushChannel, err := service.PushChannel().SelectById(ctx, in.ChannelId)
	if err != nil {
		return
	}
	if pushChannel == nil {
		err = gerror.New("渠道不存在")
		return
	}

	isUnique, err := s.checkCodeUnique(ctx, in.Code, in.Id)
	if err != nil {
		return
	}
	if !isUnique {
		err = gerror.New("模板编码已存在")
		return
	}

	_, err = dao.PushTemplate.Ctx(ctx).Update(&do.PushTemplate{
		Name:      in.Name,
		Code:      in.Code,
		ChannelId: in.ChannelId,
		Params:    in.Params,
		Cron:      in.Cron,
		MsgType:   in.MsgType,
		Remark:    in.Remark,
		UpdateBy:  in.UpdateBy,
	}, dao.PushTemplate.Columns().Id, in.Id)
	return
}

// HasByChannelIds 判断渠道下面是否有模板
func (s *sPushTemplate) HasByChannelIds(ctx context.Context, channelIds ...int64) (has bool, err error) {
	count, err := dao.PushTemplate.Ctx(ctx).WhereIn(dao.PushTemplate.Columns().ChannelId, channelIds).Count()
	if err != nil {
		err = gerror.Wrap(err, "系统错误")
		return
	}
	has = count > 0
	return
}

// DeleteByIds 批量删除消息模板
func (s *sPushTemplate) DeleteByIds(ctx context.Context, ids []int64) (err error) {
	_, err = dao.PushTemplate.Ctx(ctx).Where(dao.PushTemplate.Columns().Id, ids).Delete()
	return
}

// SendTest 发送测试
func (s *sPushTemplate) SendTest(ctx context.Context, in *systemModel.PushTemplateTestInput) (err error) {
	template, err := s.SelectById(ctx, in.Id)
	if err != nil {
		return
	}
	err = client.NewTask(ctx, tasks.TypePush, &tasksModel.Payload{
		Payload: gvar.New(&tasksModel.PayloadPush{
			TemplateId:     in.Id,
			ChannelId:      template.ChannelId,
			Accounts:       []string{in.Account},
			Template:       gjson.New(template.Params).Map(),
			TemplateParams: in.TemplateParams,
		}),
	})
	return
}

// 检查模板编码是否唯一
func (s *sPushTemplate) checkCodeUnique(ctx context.Context, code string, id int64) (isUnique bool, err error) {
	template, err := s.SelectByCode(ctx, code)
	if err != nil {
		return
	}
	isUnique = template == nil || template.Id == id
	return
}

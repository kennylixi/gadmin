// ============================================================================
// This is auto-generated by gen tool only once. Fill this file as you wish.
// 接口管理Logic层
// @author kennylixi
// @date 2023-05-14 11:01:08
// ============================================================================

package service

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/text/gstr"
	commonModel "github.com/kennylixi/gadmin/internal/modules/common/model"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
	sysService "github.com/kennylixi/gadmin/internal/modules/system/service"
	"net/http"
)

// Api 接口管理管理服务
type sApi struct{}

func init() {
	sysService.RegisterApi(New())
}

func New() *sApi {
	return &sApi{}
}

// SelectById 查询接口管理信息
func (s *sApi) SelectById(ctx context.Context, apiId int64) (ent *entity.Api, err error) {
	err = dao.Api.Ctx(ctx).Fields(&entity.Api{}).Scan(&ent, dao.Api.Columns().ApiId, apiId)
	if err != nil {
		return nil, err
	}
	if ent == nil {
		return nil, gerror.New("数据不存在")
	}

	return ent, nil
}

// SelectByIds 根据ID查询列表
func (s *sApi) SelectByIds(ctx context.Context, apiIds []int64) (list []*entity.Api, err error) {
	err = dao.Api.Ctx(ctx).Fields(entity.Api{}).
		WhereIn(dao.Api.Columns().ApiId, apiIds).
		Scan(&list)
	return
}

// SelectList 查询接口管理列表
func (s *sApi) SelectList(ctx context.Context, in *model.ApiListInput) (out *model.ApiListOutput, err error) {
	m := dao.Api.Ctx(ctx)
	if apiName := gstr.Trim(in.ApiName); len(apiName) > 0 {
		m = m.WhereLike(dao.Api.Columns().ApiName, "%"+apiName+"%")
	}
	if apiModule := gstr.Trim(in.ApiModule); len(apiModule) > 0 {
		m = m.WhereLike(dao.Api.Columns().ApiModule, "%"+apiModule+"%")
	}
	if apiMethod := gstr.Trim(in.ApiMethod); len(apiMethod) > 0 {
		m = m.Where(dao.Api.Columns().ApiMethod, apiMethod)
	}
	if apiUrl := gstr.Trim(in.ApiUrl); len(apiUrl) > 0 {
		m = m.WhereLike(dao.Api.Columns().ApiUrl, "%"+apiUrl+"%")
	}

	out = new(model.ApiListOutput)
	out.Total, err = m.Count()
	if err != nil || out.Total == 0 {
		return
	}

	err = commonService.BizCtx().Page(ctx, m).Fields(&entity.Api{}).OrderAsc(dao.Api.Columns().ApiModule).Scan(&out.List)

	return
}

// SelectModuleList 查询接口模块列表
func (s *sApi) SelectModuleList(ctx context.Context) (out []string, err error) {
	value, err := dao.Api.Ctx(ctx).Fields(dao.Api.Columns().ApiModule).Distinct().Array()
	if err != nil {
		return
	}
	for _, v := range value {
		out = append(out, v.String())
	}
	return
}

// SelectApisByRoleId 获取角色授权的接口列表
func (s *sApi) SelectApisByRoleId(ctx context.Context, roleId int64) (apiIds []int64, err error) {
	apiIds = make([]int64, 0)
	array, err := dao.Api.Ctx(ctx).
		FieldsPrefix(dao.Api.Table(), dao.Api.Columns().ApiId).
		LeftJoinOnField(dao.RoleApi.Table(), dao.Api.Columns().ApiId).
		WherePrefix(dao.RoleApi.Table(), dao.RoleApi.Columns().RoleId, roleId).
		Array()
	if err != nil {
		return
	}
	if !g.IsEmpty(array) {
		for _, value := range array {
			apiIds = append(apiIds, value.Int64())
		}
	}
	return
}

// Treeselect 构建接口树形列表
func (s *sApi) Treeselect(ctx context.Context) (items []*commonModel.TreeSelect, err error) {
	apiList := ([]*entity.Api)(nil)
	err = dao.Api.Ctx(ctx).Fields(&entity.Api{}).OrderAsc(dao.Api.Columns().ApiModule).Scan(&apiList)
	if err != nil || apiList == nil {
		return
	}

	// 根据模块归类
	module := make(map[string][]*entity.Api)
	moduleSort := make(map[string]int)
	var sort int
	for _, api := range apiList {
		if _, ok := module[api.ApiModule]; !ok {
			module[api.ApiModule] = make([]*entity.Api, 0)
			moduleSort[api.ApiModule] = sort
			sort++
		}
		module[api.ApiModule] = append(module[api.ApiModule], api)
	}

	var (
		moduleCount = len(module)
		moduleIndex = -1
	)
	// 构建树形结构
	items = make([]*commonModel.TreeSelect, moduleCount)
	for name, apis := range module {
		item := &commonModel.TreeSelect{
			Id:       int64(moduleIndex),
			Label:    name,
			Children: make([]*commonModel.TreeSelect, 0, len(apis)),
		}
		for _, api := range apis {
			item.Children = append(item.Children, &commonModel.TreeSelect{
				Id:    api.ApiId,
				Label: fmt.Sprintf("[%s]%s %s", api.ApiMethod, api.ApiName, api.ApiUrl),
			})
		}
		items[moduleSort[name]] = item
		moduleIndex--
	}
	return
}

// SelectApiListByMenuIds 根据菜单查询所有的API
func (s *sApi) SelectApiListByMenuIds(ctx context.Context, menuIds []int64) (apis []*entity.Api, err error) {
	err = dao.Api.Ctx(ctx).
		FieldsPrefix(dao.Api.Table(), &entity.Api{}).
		LeftJoinOnField(dao.MenuApi.Table(), dao.Api.Columns().ApiId).
		WherePrefixIn(dao.MenuApi.Table(), dao.MenuApi.Columns().MenuId, menuIds).
		Scan(&apis)
	return
}

// Insert 新增接口管理
func (s *sApi) Insert(ctx context.Context, in *model.ApiAddInput) (err error) {
	_, err = dao.Api.Ctx(ctx).InsertAndGetId(&do.Api{
		ApiName:   in.ApiName,
		ApiModule: in.ApiModule,
		ApiUrl:    in.ApiUrl,
		ApiMethod: in.ApiMethod,
		Remark:    in.Remark,
		CreateBy:  in.CreateBy,
	})
	return
}

// Update 修改接口管理
func (s *sApi) Update(ctx context.Context, in *model.ApiEditInput) (err error) {
	_, err = dao.Api.Ctx(ctx).Update(&do.Api{
		ApiName:   in.ApiName,
		ApiModule: in.ApiModule,
		ApiUrl:    in.ApiUrl,
		ApiMethod: in.ApiMethod,
		Remark:    in.Remark,
		UpdateBy:  in.UpdateBy,
	}, dao.Api.Columns().ApiId, in.ApiId)
	return
}

// DeleteByIds 批量删除接口管理
func (s *sApi) DeleteByIds(ctx context.Context, apiIds []int64) (err error) {
	_, err = dao.Api.Ctx(ctx).Where(dao.Api.Columns().ApiId, apiIds).Delete()
	return
}

// ReImportAll 导入所有接口
func (s *sApi) ReImportAll(ctx context.Context) (err error) {
	if _, err = g.DB().Exec(ctx, fmt.Sprintf(`TRUNCATE TABLE %s`, dao.Api.Table())); err != nil {
		return
	}

	openApi := g.Server().GetOpenApi()
	var apiList []*do.Api
	for url, path := range openApi.Paths {
		if path.Get != nil {
			apiList = append(apiList, s.newApiByOperation(path.Get.Summary, http.MethodGet, url, path.Get.Tags))
		}
		if path.Post != nil {
			apiList = append(apiList, s.newApiByOperation(path.Post.Summary, http.MethodPost, url, path.Post.Tags))
		}
		if path.Put != nil {
			apiList = append(apiList, s.newApiByOperation(path.Put.Summary, http.MethodPut, url, path.Put.Tags))
		}
		if path.Delete != nil {
			apiList = append(apiList, s.newApiByOperation(path.Delete.Summary, http.MethodDelete, url, path.Delete.Tags))
		}
		if path.Patch != nil {
			apiList = append(apiList, s.newApiByOperation(path.Patch.Summary, http.MethodPatch, url, path.Patch.Tags))
		}
		if path.Head != nil {
			apiList = append(apiList, s.newApiByOperation(path.Head.Summary, http.MethodHead, url, path.Head.Tags))
		}
		if path.Connect != nil {
			apiList = append(apiList, s.newApiByOperation(path.Connect.Summary, http.MethodConnect, url, path.Connect.Tags))
		}
	}

	_, err = dao.Api.Ctx(ctx).Insert(&apiList)
	return
}

func (s *sApi) newApiByOperation(name, method, url string, tags []string) *do.Api {
	sysApi := &do.Api{
		ApiName:   name,
		ApiMethod: method,
		ApiUrl:    url,
	}
	if !g.IsEmpty(tags) {
		sysApi.ApiModule = tags[0]
	}
	return sysApi
}

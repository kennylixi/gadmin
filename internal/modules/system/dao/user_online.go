// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalUserOnlineDao is internal type for wrapping internal DAO implements.
type internalUserOnlineDao = *internal.UserOnlineDao

// userOnlineDao is the data access object for table sys_user_online.
// You can define custom methods on it to extend its functionality as you wish.
type userOnlineDao struct {
	internalUserOnlineDao
}

var (
	// UserOnline is globally public accessible object for table sys_user_online operations.
	UserOnline = userOnlineDao{
		internal.NewUserOnlineDao(),
	}
)

// Fill with you ideas below.

// SelectByTokenId 查询在线用户状态信息
// @param tokenId
func (d *userOnlineDao) SelectByTokenId(ctx context.Context, tokenId string) (online *entity.UserOnline, err error) {
	err = UserOnline.Ctx(ctx).Scan(&online, UserOnline.Columns().TokenId, tokenId)
	if err != nil {
		return nil, err
	}
	if online == nil {
		return nil, gerror.New("数据不存在")
	}
	return online, nil
}

// SelectList 查询在线用户状态列表
func (d *userOnlineDao) SelectList(ctx context.Context, online *entity.UserOnline) (list []*entity.UserOnline, total int, err error) {
	m := UserOnline.Ctx(ctx)
	if userName := gstr.Trim(online.UserName); len(userName) > 0 {
		m = m.WhereLike(UserOnline.Columns().UserName, "%"+userName+"%")
	}
	if ip := gstr.Trim(online.Ipaddr); len(ip) > 0 {
		m = m.WhereLike(UserOnline.Columns().Ipaddr, "%"+ip+"%")
	}

	m = commonService.BizCtx().WhereBeginTime(ctx, UserOnline.Columns().LoginTime, m)
	m = commonService.BizCtx().WhereEndTime(ctx, UserOnline.Columns().LoginTime, m)

	list = []*entity.UserOnline{}
	total, err = m.Fields("*").Count()
	if err != nil || total == 0 {
		return
	}
	err = commonService.BizCtx().Page(ctx, m).FieldsEx(UserOnline.Columns().Token).Scan(&list)
	return
}

// DeleteById 删除用户在线信息
func (d *userOnlineDao) DeleteById(ctx context.Context, id int64, tx gdb.TX) error {
	_, err := UserOnline.Ctx(ctx).TX(tx).Delete(UserOnline.Columns().Id, id)
	return err
}

// DeleteByToken 根据Token删除在线信息
func (d *userOnlineDao) DeleteByToken(ctx context.Context, token string) error {
	_, err := UserOnline.Ctx(ctx).Delete(UserOnline.Columns().Token, token)
	return err
}

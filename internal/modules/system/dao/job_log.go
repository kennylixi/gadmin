// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalsysJobLogDao is internal type for wrapping internal DAO implements.
type internalJobLogDao = *internal.JobLogDao

// jobLogDao is the data access object for table sys_job_log.
// You can define custom methods on it to extend its functionality as you wish.
type jobLogDao struct {
	internalJobLogDao
}

var (
	// JobLog is globally public accessible object for table sys_job_log operations.
	JobLog = jobLogDao{
		internal.NewJobLogDao(),
	}
)

// Fill with you ideas below.

// SelectJobLogById 查询定时任务调度日志表
//	@param JobLogId 定时任务调度日志表ID
func (d *jobLogDao) SelectJobLogById(ctx context.Context, jobLogId int64) (*entity.JobLog, error) {
	jobLog := (*entity.JobLog)(nil)
	err := JobLog.Ctx(ctx).Fields(&entity.JobLog{}).Scan(&jobLog, JobLog.Columns().JobLogId, jobLogId)
	if err != nil {
		return nil, err
	}
	if jobLog == nil {
		return nil, gerror.New("数据不存在")
	}
	return jobLog, nil
}

// SelectJobLogList 查询定时任务调度日志表列表
//	@param req 过滤条件
func (d *jobLogDao) SelectJobLogList(ctx context.Context, jobLog *entity.JobLog) (list []*entity.JobLog, total int, err error) {
	m := JobLog.Ctx(ctx).Ctx(ctx)
	if invokeTarget := gstr.Trim(jobLog.InvokeTarget); len(invokeTarget) > 0 {
		m = m.WhereLike(JobLog.Columns().InvokeTarget, "%"+invokeTarget+"%")
	}
	if status := gstr.Trim(jobLog.Status); len(status) > 0 {
		m = m.Where(JobLog.Columns().Status, status)
	}
	list = ([]*entity.JobLog)(nil)
	total, err = m.Count()
	if err != nil || total == 0 {
		return
	}
	err = commonService.BizCtx().Page(ctx, m).Fields(&entity.JobLog{}).Scan(&list)
	return
}

// InsertJobLog 新增定时任务调度日志表
//	@param jobLog 定时任务调度日志表
func (d *jobLogDao) InsertJobLog(ctx context.Context, jobLog *do.JobLog, tx ...gdb.TX) (int64, error) {
	m := JobLog.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	id, err := m.InsertAndGetId(jobLog)
	if err != nil {
		return 0, err
	}
	return id, nil
}

// UpdateJobLog 修改定时任务调度日志表
//	@param jobLog 定时任务调度日志表
func (d *jobLogDao) UpdateJobLog(ctx context.Context, jobLog *do.JobLog, tx ...gdb.TX) error {
	m := JobLog.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	_, err := m.Update(jobLog, JobLog.Columns().JobLogId, jobLog.JobLogId)
	return err
}

// DeleteJobLogById 删除定时任务调度日志表
//	@param JobLogId 定时任务调度日志表ID
func (d *jobLogDao) DeleteJobLogById(ctx context.Context, jobLogId int64, tx ...gdb.TX) error {
	m := JobLog.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	_, err := m.Delete(JobLog.Columns().JobLogId, jobLogId)
	return err
}

// DeleteJobLogByIds 批量删除定时任务调度日志表
//	@param JobLogIds 需要删除的数据ID
func (d *jobLogDao) DeleteJobLogByIds(ctx context.Context, jobLogIds []int64, tx ...gdb.TX) error {
	m := JobLog.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	_, err := m.Delete(JobLog.Columns().JobLogId, jobLogIds)
	return err
}

// Clean 清空任务日志
func (d *jobLogDao) Clean(ctx context.Context) error {
	_, err := g.DB().Ctx(ctx).Exec(ctx, "truncate table "+JobLog.Table())
	if err != nil {
		g.Log().Error(ctx, err)
		err = gerror.New("清除失败")
	}
	return err
}

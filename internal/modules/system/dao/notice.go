// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalNoticeDao is internal type for wrapping internal DAO implements.
type internalNoticeDao = *internal.NoticeDao

// noticeDao is the data access object for table sys_notice.
// You can define custom methods on it to extend its functionality as you wish.
type noticeDao struct {
	internalNoticeDao
}

var (
	// Notice is globally public accessible object for table sys_notice operations.
	Notice = noticeDao{
		internal.NewNoticeDao(),
	}
)

// Fill with you ideas below.

// SelectNoticeById 查询公告信息
//	@param noticeId 公告ID
func (d *noticeDao) SelectNoticeById(ctx context.Context, noticeId int64) (notice *entity.Notice, err error) {
	err = Notice.Ctx(ctx).Scan(&notice, Notice.Columns().NoticeId, noticeId)
	if err != nil {
		g.Log().Error(ctx, err)
		return nil, err
	}
	if notice == nil {
		return nil, gerror.New("数据不存在")
	}
	return notice, nil
}

// SelectNoticeList 查询公告列表
//	@param req 过滤条件
func (d *noticeDao) SelectNoticeList(ctx context.Context, con *entity.Notice) (list []*entity.Notice, total int, err error) {
	m := Notice.Ctx(ctx)
	if noticeTitle := gstr.Trim(con.NoticeTitle); len(noticeTitle) > 0 {
		m = m.WhereLike(Notice.Columns().NoticeTitle, "%"+noticeTitle+"%")
	}
	if createBy := gstr.Trim(con.CreateBy); len(createBy) > 0 {
		m = m.WhereLike(Notice.Columns().CreateBy, "%"+createBy+"%")
	}
	if noticeType := gstr.Trim(con.NoticeType); len(noticeType) > 0 {
		m = m.Where(Notice.Columns().NoticeType, noticeType)
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, Notice.Columns().CreatedAt, m)
	m = commonService.BizCtx().WhereEndTime(ctx, Notice.Columns().CreatedAt, m)

	total, err = m.Count()
	if err != nil || total == 0 {
		return
	}

	list = ([]*entity.Notice)(nil)
	err = commonService.BizCtx().Page(ctx, m).Fields(entity.Notice{}).Scan(&list)

	return
}

// Add 新增公告
//	@param notice 公告信息
//	@return 结果
func (d *noticeDao) Add(ctx context.Context, notice *do.Notice) (int64, error) {
	return Notice.Ctx(ctx).InsertAndGetId(notice)
}

// Edit 修改公告
//	@param notice 公告信息
//	@return 结果
func (d *noticeDao) Edit(ctx context.Context, notice *do.Notice) error {
	_, err := Notice.Ctx(ctx).Update(notice, Notice.Columns().NoticeId, notice.NoticeId)
	return err
}

// Delete 批量删除公告信息
//	@param noticeIds 需要删除的公告ID
//	@return 结果
func (d *noticeDao) Delete(ctx context.Context, noticeIds []int64) error {
	_, err := Notice.Ctx(ctx).Delete(Notice.Columns().NoticeId, noticeIds)
	return err
}

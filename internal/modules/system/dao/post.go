// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalPostDao is internal type for wrapping internal DAO implements.
type internalPostDao = *internal.PostDao

// postDao is the data access object for table sys_post.
// You can define custom methods on it to extend its functionality as you wish.
type postDao struct {
	internalPostDao
}

var (
	// Post is globally public accessible object for table sys_post operations.
	Post = postDao{
		internal.NewPostDao(),
	}
)

// Fill with you ideas below.

// SelectPostById 查询岗位信息
// @param postId 岗位ID
func (d *postDao) SelectPostById(ctx context.Context, postId int64) (post *entity.Post, err error) {
	err = Post.Ctx(ctx).Scan(&post, Post.Columns().PostId, postId)
	if err != nil {
		return nil, err
	}
	if post == nil {
		return nil, gerror.New("数据不存在")
	}
	return post, nil
}

// SelectPostList 查询岗位列表
// @param req 过滤条件
func (d *postDao) SelectPostList(ctx context.Context, in *model.PostListInput) (list []*model.PostListItem, total int, err error) {
	m := Post.Ctx(ctx)
	if postName := gstr.Trim(in.PostName); len(postName) > 0 {
		m = m.WhereLike(Post.Columns().PostName, "%"+postName+"%")
	}
	if postCode := gstr.Trim(in.PostCode); len(postCode) > 0 {
		m = m.WhereLike(Post.Columns().PostCode, "%"+postCode+"%")
	}
	if status := gstr.Trim(in.Status); len(status) > 0 {
		m = m.Where(Post.Columns().Status, status)
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, Post.Columns().CreatedAt, m)
	m = commonService.BizCtx().WhereEndTime(ctx, Post.Columns().CreatedAt, m)

	total, err = m.Count()
	if err != nil || total == 0 {
		return
	}

	list = ([]*model.PostListItem)(nil)
	err = commonService.BizCtx().Page(ctx, m).Fields(&entity.Post{}).Scan(&list)

	return
}

// SelectPostAll 获取所有的岗位
func (d *postDao) SelectPostAll(ctx context.Context) (results []*entity.Post, err error) {
	if err = Post.Ctx(ctx).Fields(&entity.Post{}).Scan(&results); err != nil {
		return nil, err
	}
	return results, nil
}

// SelectPostListByUserId 根据用户ID获取岗位选择框列表
// @param userId 用户ID
// @return 选中岗位ID列表
func (d *postDao) SelectPostListByUserId(ctx context.Context, userId int64) ([]int64, error) {
	m := Post.Ctx(ctx).Fields("p."+Post.Columns().PostId).As("p").
		LeftJoin(UserPost.Table(), "up", fmt.Sprintf("up.%s = p.%s", UserPost.Columns().PostId, Post.Columns().PostId)).
		LeftJoin(User.Table(), "u", fmt.Sprintf("u.%s = up.%s", User.Columns().UserId, UserPost.Columns().UserId)).
		Where(fmt.Sprintf("u.%s = ?", User.Columns().UserId), userId)

	values, err := m.Array()
	if err != nil {
		return nil, err
	}

	postIds := make([]int64, 0, len(values))
	for _, value := range values {
		postIds = append(postIds, value.Int64())
	}
	return postIds, nil
}

// SelectPostsByUserName 查询用户所属岗位组
// @param userName 用户名
// @return 结果
func (d *postDao) SelectPostsByUserName(ctx context.Context, userName string) (posts []*entity.Post, err error) {
	fields := fmt.Sprintf("p.%s,p.%s,p.%s",
		Post.Columns().PostId,
		Post.Columns().PostName,
		Post.Columns().PostCode)
	m := Post.Ctx(ctx).Fields(fields).As("p").
		LeftJoin(UserPost.Table(), "up", fmt.Sprintf("up.%s = p.%s", UserPost.Columns().PostId, Post.Columns().PostId)).
		LeftJoin(User.Table(), "u", fmt.Sprintf("u.%s = up.%s", User.Columns().UserId, UserPost.Columns().UserId)).
		Where(fmt.Sprintf("u.%s = ?", User.Columns().UserName), userName)
	err = m.Scan(&posts)
	return posts, err
}

// Add 新增岗位
// @param post 岗位信息
// @return 结果
func (d *postDao) Add(ctx context.Context, post *do.Post) (int64, error) {
	return Post.Ctx(ctx).InsertAndGetId(post)
}

// Edit 修改岗位
// @param post 岗位信息
// @return 结果
func (d *postDao) Edit(ctx context.Context, post *do.Post) error {
	_, err := Post.Ctx(ctx).Update(post, Post.Columns().PostId, post.PostId)
	return err
}

// Delete 批量删除岗位
// @param postIds 需要删除的岗位ID
// @return 结果
func (d *postDao) Delete(ctx context.Context, postIds []int64) error {
	_, err := Post.Ctx(ctx).Delete(Post.Columns().PostId, postIds)
	return err
}

// GetByPostName 根据岗位名字获取岗位信息
// @param postName 岗位名称
func (d *postDao) GetByPostName(ctx context.Context, postName string) (post *entity.Post, err error) {
	err = Post.Ctx(ctx).Scan(&post, Post.Columns().PostName, postName)
	return post, err
}

// GetByPostCode 根据岗位编号获取岗位信息
// @param postCode 岗位编号
func (d *postDao) GetByPostCode(ctx context.Context, postCode string) (post *entity.Post, err error) {
	err = Post.Ctx(ctx).Scan(&post, Post.Columns().PostCode, postCode)
	return post, err
}

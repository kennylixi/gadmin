// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
)

// internalUserPostDao is internal type for wrapping internal DAO implements.
type internalUserPostDao = *internal.UserPostDao

// userPostDao is the data access object for table sys_user_post.
// You can define custom methods on it to extend its functionality as you wish.
type userPostDao struct {
	internalUserPostDao
}

var (
	// UserPost is globally public accessible object for table sys_user_post operations.
	UserPost = userPostDao{
		internal.NewUserPostDao(),
	}
)

// Fill with you ideas below.

// CountUserPostById 通过岗位ID查询岗位使用数量
//	@param postId 岗位ID
//	@return 结果
func (d *userPostDao) CountUserPostById(ctx context.Context, postId int64) (int, error) {
	return UserPost.Ctx(ctx).Where(UserPost.Columns().PostId, postId).Count()
}

func (d *userPostDao) DeleteUserPostByUserId(ctx context.Context, userId int64, tx gdb.TX) error {
	_, err := UserPost.Ctx(ctx).TX(tx).Where(UserPost.Columns().UserId, userId).Delete()
	return err
}

func (d *userPostDao) DeleteUserPostByUserIds(ctx context.Context, userIds []int64, tx gdb.TX) error {
	_, err := UserPost.Ctx(ctx).TX(tx).Where(UserPost.Columns().UserId, userIds).Delete()
	return err
}

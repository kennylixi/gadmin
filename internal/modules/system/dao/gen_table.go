// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/util/gutil"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	entity2 "github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalGenTableDao is internal type for wrapping internal DAO implements.
type internalGenTableDao = *internal.GenTableDao

// genTableDao is the data access object for table gen_table.
// You can define custom methods on it to extend its functionality as you wish.
type genTableDao struct {
	internalGenTableDao
}

var (
	// GenTable is globally public accessible object for table gen_table operations.
	GenTable = genTableDao{
		internal.NewGenTableDao(),
	}
)

// Fill with you ideas below.

// SelectGenTableList 查询业务列表
//	@param genTable 业务信息
//	@return 业务集合
func (d *genTableDao) SelectGenTableList(ctx context.Context, genTable *entity2.GenTable) (list []*entity2.GenTable, total int, err error) {
	m := GenTable.Ctx(ctx)
	if len(genTable.TableName) > 0 {
		m = m.Where(fmt.Sprintf("lower(%s) like lower(?)", GenTable.Columns().TableName), "%"+genTable.TableName+"%")
	}
	if len(genTable.TableComment) > 0 {
		m = m.Where(fmt.Sprintf("lower(%s) like lower(?)", GenTable.Columns().TableComment), "%"+genTable.TableComment+"%")
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, GenTable.Columns().CreatedAt, m)
	m = commonService.BizCtx().WhereEndTime(ctx, GenTable.Columns().CreatedAt, m)

	total, err = m.Count()
	if err != nil || total <= 0 {
		return
	}

	err = commonService.BizCtx().Page(ctx, m).Fields(entity2.GenTable{}).Scan(&list)
	return
}

// SelectDbTableList 查询据库列表
//	@param genTable 业务信息
//	@return 数据库表集合
func (d *genTableDao) SelectDbTableList(ctx context.Context, genTable *entity2.GenTable) (res *model.GenTableDbTableOutput, err error) {
	res = &model.GenTableDbTableOutput{}
	sql := "select %s from information_schema.tables where table_schema = (select database()) AND table_name NOT LIKE ? AND table_name NOT IN (select table_name from " + GenTable.Table() + ")"
	params := make(g.SliceAny, 0, 7)
	params = append(params, "gen_%")
	if len(genTable.TableName) > 0 {
		sql += fmt.Sprintf(" AND lower(%s) like lower(?)", GenTable.Columns().TableName)
		params = append(params, "%"+genTable.TableName+"%")
	}
	if len(genTable.TableComment) > 0 {
		sql += fmt.Sprintf(" AND lower(%s) like lower(?)", GenTable.Columns().TableComment)
		params = append(params, "%"+genTable.TableComment+"%")
	}
	searchParams := commonService.BizCtx().GetSearchParams(ctx)
	if searchParams != nil {
		createdAt := GenTable.Columns().CreatedAt
		if beginTime := searchParams.GetBeginTime(createdAt); beginTime != nil {
			sql += fmt.Sprintf(" AND %s >= ?", createdAt)
			params = append(params, beginTime)
		}
		if endTime := searchParams.GetEndTime(createdAt); endTime != nil {
			sql += fmt.Sprintf(" AND %s <= ?", createdAt)
			params = append(params, endTime)
		}
	}

	res.Total, err = g.DB().Ctx(ctx).GetCount(ctx, fmt.Sprintf(sql, "count(*)"), params)
	if err != nil {
		err = gerror.Wrap(err, "获取据库列表数量失败")
		return
	}
	if res.Total == 0 {
		return
	}

	if searchParams != nil {
		if searchParams.PageNum <= 0 {
			searchParams.PageNum = 1
		}
		sql = sql + " Limit ?, ?"
		params = append(params, (searchParams.PageNum-1)*searchParams.PageNum)
		params = append(params, searchParams.PageSize)
		res.Page = searchParams.PageNum
		res.Size = searchParams.PageSize
	}

	result, err := g.DB().Ctx(ctx).GetAll(ctx, fmt.Sprintf(sql, "table_name, table_comment, create_time, update_time"), params)
	err = result.Structs(&res.List)
	if err != nil {
		err = gerror.Wrap(err, "获取据库列表失败")
		return
	}
	return
}

// SelectDbTableListByNames 查询据库列表
//	@param tableNames 表名称组
//	@return 数据库表集合
func (d *genTableDao) SelectDbTableListByNames(ctx context.Context, tableNames []string) (list []*entity2.GenTable, err error) {
	sql := "select table_name, table_comment, create_time, update_time from information_schema.tables where table_name NOT LIKE 'gen_%' and table_schema = (select database()) and table_name in(?)"
	result, err := d.DB().GetAll(ctx, sql, tableNames)
	err = result.Structs(&list)
	return
}

// SelectGenTableAll 查询所有表信息
//	@return 表信息集合
func (d *genTableDao) SelectGenTableAll(ctx context.Context) (list []*model.GenTableItem, err error) {
	if err = GenTable.Ctx(ctx).Fields(entity2.GenTable{}).ScanList(&list, "Table"); err != nil {
		return
	}

	err = GenTableColumn.Ctx(ctx).
		Fields(entity2.GenTableColumn{}).
		Where(GenTableColumn.Columns().TableId, gutil.ListItemValuesUnique(list, "Table", "TableId")).
		ScanList(&list, "Columns", "Table", "table_id:TableId")
	if err != nil {
		return
	}
	return
}

// SelectGenTableById 查询表ID业务信息
//	@param id 业务ID
//	@return 业务信息
func (d *genTableDao) SelectGenTableById(ctx context.Context, id int64) (*model.GenTableItem, error) {
	var scanData model.GenTableItem
	if err := GenTable.Ctx(ctx).Scan(&scanData.Table, GenTable.Columns().TableId, id); err != nil {
		return nil, err
	}

	if err := GenTableColumn.Ctx(ctx).
		Order(GenTableColumn.Columns().Sort).
		Scan(&scanData.Columns, GenTableColumn.Columns().TableId, id); err != nil {
		return nil, err
	}
	return &scanData, nil
}

// SelectGenTableByName 查询表名称业务信息
//	@param tableName 表名称
//	@return 业务信息
func (d *genTableDao) SelectGenTableByName(ctx context.Context, tableName string) (*model.GenTableItem, error) {
	var scanData model.GenTableItem
	if err := GenTable.Ctx(ctx).Scan(&scanData.Table, GenTable.Columns().TableName, tableName); err != nil {
		return nil, err
	}

	if err := GenTableColumn.Ctx(ctx).
		Order(GenTableColumn.Columns().Sort).
		Scan(&scanData.Columns, GenTableColumn.Columns().TableId, scanData.Table.TableId); err != nil {
		return nil, err
	}
	return &scanData, nil
}

// InsertGenTable 新增业务
//	@param genTable 业务信息
//	@return 结果
func (d *genTableDao) InsertGenTable(ctx context.Context, genTable *entity2.GenTable, tx ...gdb.TX) (int64, error) {
	m := GenTable.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	result, err := m.Data(genTable).Insert()
	if err != nil {
		return 0, gerror.Wrap(err, "新增业务失败")
	}
	count, _ := result.RowsAffected()
	genTable.TableId, _ = result.LastInsertId()
	return count, nil
}

// UpdateGenTable 修改业务
//	@param genTable 业务信息
//	@return 结果
func (d *genTableDao) UpdateGenTable(ctx context.Context, genTable *entity2.GenTable, tx ...gdb.TX) (int64, error) {
	m := GenTable.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	result, err := m.Update(genTable, GenTable.Columns().TableId, genTable.TableId)
	if err != nil {
		return 0, gerror.Wrap(err, "修改业务失败")
	}
	count, _ := result.RowsAffected()
	return count, nil
}

// DeleteGenTableByIds 批量删除业务
//	@param ids 需要删除的数据ID
//	@return 结果
func (d *genTableDao) DeleteGenTableByIds(ctx context.Context, ids []int64, tx ...gdb.TX) (int64, error) {
	m := GenTable.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	result, err := m.Delete(GenTable.Columns().TableId, ids)
	if err != nil {
		return 0, gerror.Wrap(err, "批量删除业务失败")
	}
	count, _ := result.RowsAffected()
	return count, nil
}

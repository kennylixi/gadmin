// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/text/gstr"
	commonService "github.com/kennylixi/gadmin/internal/modules/common/service"
	"github.com/kennylixi/gadmin/internal/modules/system/dao/internal"
	"github.com/kennylixi/gadmin/internal/modules/system/model"
	"github.com/kennylixi/gadmin/internal/modules/system/model/do"
	"github.com/kennylixi/gadmin/internal/modules/system/model/entity"
)

// internalUserDao is internal type for wrapping internal DAO implements.
type internalUserDao = *internal.UserDao

// userDao is the data access object for table sys_user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	internalUserDao
}

var (
	// User is globally public accessible object for table sys_user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

// Fill with you ideas below.

// SelectUserList 根据条件分页查询用户列表
// 	@param req 用户过滤条件
// 	@return 用户信息集合信息
func (d *userDao) SelectUserList(ctx context.Context, user *entity.User) (list []*model.UserListItem, total int, err error) {
	uc := User.Columns()
	dc := Dept.Columns()
	fields := fmt.Sprintf("u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,d.%s,d.%s",
		uc.UserId, uc.DeptId, uc.NickName, uc.UserName, uc.Email, uc.Avatar, uc.Phonenumber, uc.Password, uc.Sex,
		uc.Status, uc.LoginIp, uc.LoginDate, uc.CreateBy, uc.CreatedAt, uc.Remark, dc.DeptName, dc.Leader)
	m := User.Ctx(ctx).As("u").LeftJoin(Dept.Table(), "d", fmt.Sprintf("u.%s = d.%s", uc.DeptId, dc.DeptId))
	if userName := gstr.Trim(user.UserName); len(userName) > 0 {
		m = m.WhereLike("u."+uc.UserName, "%"+userName+"%")
	}
	if len(user.Status) > 0 {
		m = m.Where(fmt.Sprintf("u.%s = ?", uc.Status), user.Status)
	}
	if user.UserId > 0 {
		m = m.Where(fmt.Sprintf("u.%s = ?", uc.UserId), user.UserId)
	}
	if phonenumber := gstr.Trim(user.Phonenumber); len(phonenumber) > 0 {
		m = m.WhereLike("u."+uc.Phonenumber, "%"+phonenumber+"%")
	}
	if userName := gstr.Trim(user.UserName); len(userName) > 0 {
		m = m.WhereLike("u."+uc.UserName, "%"+userName+"%")
	}
	m = commonService.BizCtx().WhereBeginTime(ctx, uc.CreatedAt, m, "u")
	m = commonService.BizCtx().WhereEndTime(ctx, uc.CreatedAt, m, "u")
	if user.DeptId > 0 {
		where := fmt.Sprintf("(u.%s = ? OR u.%s IN ( SELECT t.%s FROM %s t WHERE find_in_set(?, ancestors) ))",
			uc.DeptId, uc.DeptId, dc.DeptId, Dept.Table())
		m = m.Where(where, user.DeptId, user.DeptId)
	}

	total, err = m.Count()
	if err != nil || total <= 0 {
		return
	}
	list = ([]*model.UserListItem)(nil)
	err = commonService.BizCtx().Page(ctx, m).Fields(fields).Scan(&list)
	return
}

// Search 根据用户名搜索用户列表
func (d *userDao) Search(ctx context.Context, user *entity.User) (list []*model.UserListItem, err error) {
	uc := User.Columns()
	dc := Dept.Columns()
	fields := fmt.Sprintf("u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,u.%s,d.%s,d.%s",
		uc.UserId, uc.DeptId, uc.NickName, uc.UserName, uc.Email, uc.Avatar, uc.Phonenumber, uc.Password, uc.Sex,
		uc.Status, uc.LoginIp, uc.LoginDate, uc.CreateBy, uc.CreatedAt, uc.Remark, dc.DeptName, dc.Leader)
	m := User.Ctx(ctx).As("u").LeftJoin(Dept.Table(), "d", fmt.Sprintf("u.%s = d.%s", uc.DeptId, dc.DeptId))

	if len(user.Status) > 0 {
		m = m.Where(fmt.Sprintf("u.%s = ?", uc.Status), user.Status)
	}
	if userName := gstr.Trim(user.UserName); len(userName) > 0 {
		m = m.WhereLike("u."+uc.UserName, "%"+userName+"%")
	}

	if user.DeptId > 0 {
		where := fmt.Sprintf("(u.%s = ? OR u.%s IN ( SELECT t.%s FROM %s t WHERE find_in_set(?, ancestors) ))",
			uc.DeptId, uc.DeptId, dc.DeptId, Dept.Table())
		m = m.Where(where, user.DeptId, user.DeptId)
	}

	err = m.Fields(fields).Scan(&list)
	return
}

// SelectUserByUserName 通过用户名查询用户
// 	@param userName 用户名
// 	@return 用户对象信息
func (d *userDao) SelectUserByUserName(ctx context.Context, userName string) (*entity.User, error) {
	user := (*entity.User)(nil)
	err := User.Ctx(ctx).Scan(&user, User.Columns().UserName, userName)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// SelectUserDetailByUserName 通过用户名查询用户详细信息
// @param userName 用户名
// @return 用户对象信息
func (d *userDao) SelectUserDetailByUserName(ctx context.Context, userName string) (*model.User, error) {
	userVo := &model.User{}
	err := User.Ctx(ctx).Scan(&userVo.User, User.Columns().UserName, userName)
	if err != nil {
		return nil, err
	}
	if userVo.User == nil {
		return nil, nil
	}
	err = Dept.Ctx(ctx).Scan(&userVo.Dept, Dept.Columns().DeptId, userVo.User.DeptId)
	if err != nil {
		return nil, err
	}
	values, err := UserRole.Ctx(ctx).Fields(UserRole.Columns().RoleId).
		Where(UserRole.Columns().UserId, userVo.User.UserId).Array()
	if err != nil {
		return nil, err
	}
	roleIds := make([]int64, 0, len(values))
	for _, value := range values {
		roleIds = append(roleIds, value.Int64())
	}
	err = Role.Ctx(ctx).Where(Role.Columns().RoleId, roleIds).Scan(&userVo.Roles)
	if err != nil {
		return nil, err
	}
	return userVo, nil
}

// SelectUserByUserNameAndPwd 通过用户名和密码查询用户
// @param userName 用户名
// @return 用户对象信息
func (d *userDao) SelectUserByUserNameAndPwd(ctx context.Context, userName, pwd string) (user *entity.User, err error) {
	err = User.Ctx(ctx).Where(g.Map{
		User.Columns().UserName: userName,
		User.Columns().Password: pwd,
	}).Scan(&user)
	return user, err
}

// SelectUserById 通过用户ID查询用户
// @param userId 用户ID
// @return 用户对象信息
func (d *userDao) SelectUserById(ctx context.Context, userId int64) (user *entity.User, err error) {
	err = User.Ctx(ctx).WherePri(User.Columns().UserId, userId).Scan(&user)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, gerror.New("数据不存在")
	}
	return user, nil
}

// SelectUserDetailById 通过用户ID查询用户详细信息，包括部门、岗位、角色等信息
// @param userId 用户ID
// @return 用户对象信息
func (d *userDao) SelectUserDetailById(ctx context.Context, userId int64) (*model.User, error) {
	userVo := &model.User{}
	err := User.Ctx(ctx).Scan(&userVo.User, User.Columns().UserId, userId)
	if err != nil {
		return nil, err
	}
	if userVo.User == nil {
		return nil, nil
	}
	err = Dept.Ctx(ctx).Scan(&userVo.Dept, Dept.Columns().DeptId, userVo.User.DeptId)
	if err != nil {
		return nil, err
	}
	values, err := UserRole.Ctx(ctx).Fields(UserRole.Columns().RoleId).Where(UserRole.Columns().UserId, userVo.User.UserId).Array()
	if err != nil {
		return nil, err
	}
	roleIds := make([]int64, 0, len(values))
	for _, value := range values {
		roleIds = append(roleIds, value.Int64())
	}
	err = Role.Ctx(ctx).Where(Role.Columns().RoleId, roleIds).Scan(&userVo.Roles)
	if err != nil {
		return nil, err
	}
	return userVo, nil
}

// Add 新增用户信息
// @param user 用户信息
func (d *userDao) Add(ctx context.Context, user *do.User, tx gdb.TX) (int64, error) {
	return User.Ctx(ctx).TX(tx).InsertAndGetId(user)
}

// Edit 修改用户信息
// @param user 用户信息
func (d *userDao) Edit(ctx context.Context, user *do.User, tx ...gdb.TX) error {
	m := User.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	_, err := m.Update(user, d.Columns().UserId, user.UserId)
	return err
}

// UpdateUserByUserName 根据用户名修改用户数据
func (d *userDao) UpdateUserByUserName(ctx context.Context, user *do.User) error {
	_, err := User.Ctx(ctx).Update(user, User.Columns().UserName, user.UserName)
	return err
}

// UpdateUserByUserId 根据用户ID修改用户数据
func (d *userDao) UpdateUserByUserId(ctx context.Context, user *do.User) error {
	_, err := User.Ctx(ctx).Update(user, User.Columns().UserId, user.UserId)
	return err
}

// DeleteUserByIds 批量删除用户信息
// @param userIds 需要删除的用户ID
func (d *userDao) DeleteUserByIds(ctx context.Context, userIds []int64, tx ...gdb.TX) error {
	m := User.Ctx(ctx)
	if len(tx) > 0 {
		m = m.TX(tx[0])
	}
	_, err := m.Where(User.Columns().UserId, userIds).Delete()
	return err
}

// CheckUserNameUnique 校验用户名称是否唯一
// @param userName 用户名称
func (d *userDao) CheckUserNameUnique(ctx context.Context, userName string) (int, error) {
	return User.Ctx(ctx).Where(User.Columns().UserName, userName).Count()
}

// CheckPhoneUnique 校验手机号码是否唯一
// @param phonenumber 手机号码
func (d *userDao) CheckPhoneUnique(ctx context.Context, phonenumber string) (user *entity.User, err error) {
	err = User.Ctx(ctx).Where(User.Columns().Phonenumber, phonenumber).Scan(&user)
	return user, err
}

// CheckEmailUnique 校验email是否唯一
// @param email 用户邮箱
func (d *userDao) CheckEmailUnique(ctx context.Context, email string) (user *entity.User, err error) {
	err = User.Ctx(ctx).Where(User.Columns().Email, email).Scan(&user)
	return user, err
}

// SelectAllocatedList 查询已分配用户角色列表
func (d *userDao) SelectAllocatedList(ctx context.Context, roleId int64, userName, phonenumber string) (list []*model.UserListItem, total int, err error) {
	uc := User.Columns()
	dc := Dept.Columns()
	urc := UserRole.Columns()
	rc := Role.Columns()
	m := User.Ctx(ctx).Distinct().As("u").
		LeftJoin(Dept.Table(), "d", fmt.Sprintf("u.%s = d.%s", uc.DeptId, dc.DeptId)).
		LeftJoin(UserRole.Table(), "ur", fmt.Sprintf("u.%s = ur.%s", uc.UserId, urc.UserId)).
		LeftJoin(Role.Table(), "r", fmt.Sprintf("r.%s = ur.%s", rc.RoleId, urc.RoleId)).
		Where(fmt.Sprintf("r.%s", rc.RoleId), roleId)
	if len(userName) > 0 {
		m = m.WhereLike(fmt.Sprintf("u.%s", "%"+uc.UserName+"%"), userName)
	}
	if len(phonenumber) > 0 {
		m = m.WhereLike(fmt.Sprintf("u.%s", "%"+uc.Phonenumber+"%"), phonenumber)
	}

	// TODO 数据范围过滤

	total, err = m.Fields("*").Count()
	if err != nil {
		return
	}

	err = commonService.BizCtx().Page(ctx, m).FieldsPrefix("u", model.UserListItem{}).Scan(&list)

	return
}

// SelectUnallocatedList 查询未分配用户角色列表
func (d *userDao) SelectUnallocatedList(ctx context.Context, roleId int64, userName, phonenumber string) (list []*model.UserListItem, total int, err error) {
	uc := User.Columns()
	dc := Dept.Columns()
	urc := UserRole.Columns()
	rc := Role.Columns()
	m := User.Ctx(ctx).Distinct().As("u").
		LeftJoin(Dept.Table(), "d", fmt.Sprintf("u.%s = d.%s", uc.DeptId, dc.DeptId)).
		LeftJoin(UserRole.Table(), "ur", fmt.Sprintf("u.%s = ur.%s", uc.UserId, urc.UserId)).
		LeftJoin(Role.Table(), "r", fmt.Sprintf("r.%s = ur.%s", rc.RoleId, urc.RoleId)).
		Where(fmt.Sprintf("r.%s != %d or r.%s IS NULL", rc.RoleId, roleId, rc.RoleId)).
		Where(fmt.Sprintf("u.%s not in (select u.%s from %s u inner join %s ur on u.%s = ur.%s and ur.%s = %d)",
			uc.UserId, uc.UserId, User.Table(), UserRole.Table(), uc.UserId, urc.UserId, urc.RoleId, roleId))

	if len(userName) > 0 {
		m = m.WhereLike(fmt.Sprintf("u.%s", "%"+uc.UserName+"%"), userName)
	}
	if len(phonenumber) > 0 {
		m = m.WhereLike(fmt.Sprintf("u.%s", "%"+uc.Phonenumber+"%"), phonenumber)
	}

	// TODO 数据范围过滤

	total, err = m.Fields("*").Count()
	if err != nil {
		return
	}

	err = commonService.BizCtx().Page(ctx, m).FieldsPrefix("u", model.UserListItem{}).Scan(&list)

	return
}
